# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - main

resources:
  - repo: self

variables:
  tag: '$(Build.BuildId)'
  ImageName: 'neutralsminitwit:$(Build.BuildId)'

stages:
  - stage: Build
    displayName: Build and move binary
    jobs:
      - job: Build
        displayName: Test
        pool:
          vmImage: ubuntu-latest
       
        steps:

          # Build
          - task: DotNetCoreCLI@2
            displayName: 'dotnet build'
            inputs:
              projects: $(Build.SourcesDirectory)/mvc-minitwit/mvc-minitwit.csproj
          
          # Copy binaries to a staging folder
          - task: CopyFiles@2
            displayName: 'Copy output binaries'
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)/mvc-minitwit/bin/Debug'
              #Contents: '**/?(*.dll|*.pdb|*.exe)'
              Contents: |
                          **/*
                          
              TargetFolder: '$(Build.ArtifactStagingDirectory)'
          
          # Publish binaries
          - task: PublishBuildArtifacts@1
            displayName: 'Publish binaries'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'inferinput'
              publishLocation: 'Container'

        # Run Infer#
      - job: RunInferSharp
        dependsOn: 'Build'
        pool:
          vmImage: 'ubuntu-20.04'
        container:
          image: mcr.microsoft.com/infersharp:v1.0

        steps:
          # Download binaries
          - task: DownloadBuildArtifacts@0
            displayName: 'Download binaries'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'inferinput'
              downloadPath: '$(System.ArtifactsDirectory)'

          - script: |
              curl -o run_infersharp.sh https://raw.githubusercontent.com/microsoft/infersharp/v1.0/run_infersharp.sh
              chmod +x run_infersharp.sh
              ./run_infersharp.sh $(System.ArtifactsDirectory)
            displayName: 'Run Infer# analysis'
          
          - script: cat $(Build.SourcesDirectory)/infer-out/report.txt
            displayName: 'Infer# analysis result'

      - job: ReSharper
        dependsOn: 'RunInferSharp'
        displayName: 'ReSharper'
        pool: 
          vmImage: 'windows-latest'
        steps:
            - task: ResharperCli@2
              inputs:
                solutionOrProjectPath: '$(Build.SourcesDirectory)/mvc-minitwit/mvc-minitwit.csproj'
                failBuildLevelSelector: 'Warning'

      - job: Build_Publish
        dependsOn: 'RunInferSharp'
        displayName: Build and Publish
        pool:
          vmImage: ubuntu-latest
      
        steps:
            - task: SonarCloudPrepare@1
              inputs:
                SonarCloud: 'SonarCloud-MiniTwit'
                organization: 'devopsgrouph'
                scannerMode: 'MSBuild'
                projectKey: 'albertbethlowsky_DevOpsGroupH'
                projectName: 'DevOpsGroupH'
                extraProperties: |
                  sonar.exclusions=**/obj/**,**/*.dll
                  sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml
                  sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx

            - task: DotNetCoreCLI@2
              displayName: 'dotnet test'
              inputs:
                command: test
                projects: '**/*HomeControllerTests/*.csproj'
                arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --logger trx'
                publishTestResults: true
            ##arguments: "--configuration $(BuildConfiguration)"
            - task: Docker@2
              displayName: 'Build and push an image to container registry'
              inputs:
                command: buildAndPush
                repository: 'NeutralsMinitwit'
                dockerfile: '$(Build.SourcesDirectory)/mvc-minitwit/Dockerfile'
                containerRegistry: 'ACR - with Albert subscription' # name of ACR service from connection
                buildContext: '.'
                tags: |
                  $(tag)

          # - task: Docker@1
          #   displayName: 'Push the Docker image to Dockerhub'
          #   inputs:
          #     azureSubscriptionEndpoint: ACR
          #     azureContainerRegistry: neutralsminitwit.azurecr.io
          #     #containerregistrytype: 'Container Registry'
          #     #dockerRegistryEndpoint: 'ACR'
          #     command: 'Push an image'
          #     imageName: '$(ImageName)'
          #   condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

            - task: GitHubRelease@1
              inputs:
                gitHubConnection: 'albertbethlowsky'
                repositoryName: '$(Build.Repository.Name)'
                action: 'create'
                target: '$(Build.SourceVersion)'
                tagSource: 'gitTag'
                tagPattern: 'release-v[0-9]*\S*'
                changeLogCompareToRelease: 'lastFullRelease'
                changeLogType: 'commitBased'
                title: '$(Build.BuildNumber)'
                addChangeLog: true

            - task: SonarCloudAnalyze@1
              displayName: 'Run SonarCloud analysis'
            - task: SonarCloudPublish@1
              displayName: 'SonarCloud publish'
              inputs:
                pollingTimeoutSec: '300'
            

