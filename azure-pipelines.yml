# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - main

resources:
  - repo: self

variables:
  tag: '$(Build.BuildId)'
  ImageName: 'jokeren9/neutralsminitwit:$(Build.BuildId)'

stages:
  - stage: Build
    displayName: Build image
    jobs:
      - job: Build
        displayName: Test and Build
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: 'SonarCloud-MiniTwit'
              organization: 'devopsgrouph'
              scannerMode: 'MSBuild'
              projectKey: 'albertbethlowsky_DevOpsGroupH'
              projectName: 'DevOpsGroupH'
              extraProperties: |
                sonar.exclusions=**/obj/**,**/*.dll
                sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml
                sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx
          - task: DotNetCoreCLI@2
            displayName: 'dotnet test'
            inputs:
              command: test
              projects: '**/*HomeControllerTests/*.csproj'
              #arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Include="[ProjectName.*]*" /p:Exclude="[*Tests]*"'
              arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
              publishTestResults: true
              
          ##arguments: "--configuration $(BuildConfiguration)"

          - task: Docker@1
            displayName: 'Build an Docker image'
            inputs:
              containerregistrytype: 'Container Registry'
              dockerRegistryEndpoint: 'Docker Hub'
              command: 'Build an image'
              dockerfile: '$(Build.SourcesDirectory)/mvc-minitwit/Dockerfile'
              imageName: '$(ImageName)'
              includeLatestTag: true
              useDefaultContext: false
              buildContext: '.'

          - task: Docker@1
            displayName: 'Push the Docker image to Dockerhub'
            inputs:
              containerregistrytype: 'Container Registry'
              dockerRegistryEndpoint: 'Docker Hub'
              command: 'Push an image'
              imageName: '$(ImageName)'
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
          - task: GitHubRelease@1
            inputs:
              gitHubConnection: 'albertbethlowsky'
              repositoryName: '$(Build.Repository.Name)'
              action: 'create'
              target: '$(Build.SourceVersion)'
              tagSource: 'gitTag'
              tagPattern: 'release-v[0-9]*\S*'
              changeLogCompareToRelease: 'lastFullRelease'
              changeLogType: 'commitBased'
              title: '$(Build.BuildNumber)'
              addChangeLog: true

          # - task: UseDotNet@2
          #   inputs:
          #     version: '5.0.x'
          #     includePreviewVersions: true # Required for preview versions
            
          # - task: DotNetCoreCLI@2
          #   displayName: 'dotnet build'
          #   inputs:
          #     command: 'build'
          #     configuration: $(buildConfiguration)
            
          # - task: DotNetCoreCLI@2
          #   displayName: 'dotnet test'
          #   inputs:
          #     command: 'test'
          #     arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
          #     publishTestResults: true
          #     projects: 'HomeControllerTests' # update with your test project directory
            
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish code coverage report'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
            
          # old  
          # - task: DotNetCoreCLI@2
          #   displayName: Install ReportGenerator Global Tool
          #   inputs:
          #     command: custom
          #     custom: tool
          #     arguments: install dotnet-reportgenerator-globaltool -g

          # - script: echo "##vso[task.prependpath]$HOME/.dotnet/tools"
          #   displayName: 'Update PATH'

          # - script: reportgenerator "-reports:$(Agent.TempDirectory)/**/*.cobertura.xml" "-targetdir:$(Build.SourcesDirectory)/coverlet/reports" -reporttypes:Cobertura;htmlInline
          #   displayName: Create reports
          #   continueOnError: true

          # - task: PublishCodeCoverageResults@1
          #   displayName: 'Publish code coverage'
          #   inputs:
          #     codeCoverageTool: Cobertura
          #     summaryFileLocation: '$(Build.SourcesDirectory)\TestResults\Coverage\*.xml'

          - task: SonarCloudAnalyze@1
            displayName: 'Run SonarCloud analysis'
          - task: SonarCloudPublish@1
            displayName: 'SonarCloud publish'
            inputs:
              pollingTimeoutSec: '300'