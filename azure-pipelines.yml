# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - main

resources:
  - repo: self

variables:
  tag: '$(Build.BuildId)'
  ImageName: 'neutralsminitwit:$(Build.BuildId)'

stages:
  - stage: Build
    displayName: Build image
    jobs:
      - job: Build
        displayName: Test and Build
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: 'SonarCloud-MiniTwit'
              organization: 'devopsgrouph'
              scannerMode: 'MSBuild'
              projectKey: 'albertbethlowsky_DevOpsGroupH'
              projectName: 'DevOpsGroupH'
              extraProperties: |
                sonar.exclusions=**/obj/**,**/*.dll
                sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml
                sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx

          - task: DotNetCoreCLI@2
            displayName: 'dotnet test'
            inputs:
              command: test
              projects: '**/*HomeControllerTests/*.csproj'
              arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --logger trx'
              publishTestResults: true
          ##arguments: "--configuration $(BuildConfiguration)"

          - task: Docker@2
            displayName: 'Build and push an image to container registry'
            inputs:
              command: buildAndPush
              repository: 'NeutralsMinitwit'
              dockerfile: '$(Build.SourcesDirectory)/mvc-minitwit/Dockerfile'
              containerRegistry: 'ACR - with Albert subscription' # name of ACR service connection
              buildContext: '.'
              tags: |
                $(tag)

          # - task: Docker@1
          #   displayName: 'Push the Docker image to Dockerhub'
          #   inputs:
          #     azureSubscriptionEndpoint: ACR
          #     azureContainerRegistry: neutralsminitwit.azurecr.io
          #     #containerregistrytype: 'Container Registry'
          #     #dockerRegistryEndpoint: 'ACR'
          #     command: 'Push an image'
          #     imageName: '$(ImageName)'
          #   condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

          - task: GitHubRelease@1
            inputs:
              gitHubConnection: 'albertbethlowsky'
              repositoryName: '$(Build.Repository.Name)'
              action: 'create'
              target: '$(Build.SourceVersion)'
              tagSource: 'gitTag'
              tagPattern: 'release-v[0-9]*\S*'
              changeLogCompareToRelease: 'lastFullRelease'
              changeLogType: 'commitBased'
              title: '$(Build.BuildNumber)'
              addChangeLog: true

          - task: SonarCloudAnalyze@1
            displayName: 'Run SonarCloud analysis'
          - task: SonarCloudPublish@1
            displayName: 'SonarCloud publish'
            inputs:
              pollingTimeoutSec: '300'
          
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                # Downloading the repo as a zip file
                Invoke-WebRequest "https://github.com/dalion619/jetbrains-resharper-clt/archive/master.zip" -OutFile ".\jb-clt.zip"
                
                # Extract it into the current working dir
                Expand-Archive ".\jb-clt.zip" -DestinationPath ".\" -Force
                
                #$Env:BUILD_SOURCESDIRECTORY\jetbrains-resharper-clt-master\
                Write-Host "Hello World"

          - task: PowerShell@2
            inputs:
              filePath: '$(Build.SourcesDirectory)/mvc-minitwit/resharper.ps1'
              arguments: '-SolutionFilePath "..\mvc-minitwit.sln" -ExcludedExtensions "js,css,html"; DupFinder-Analysis'
              workingDirectory: '/jetbrains-resharper-clt-master/'

          # - task: PublishBuildArtifacts@1
          #   inputs:
          #     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          #     ArtifactName: 'drop'
          #     publishLocation: 'Container'